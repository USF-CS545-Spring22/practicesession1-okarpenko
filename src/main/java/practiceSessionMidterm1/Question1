Give Theta of the running time (as a function of n) of the following code snippet and explain your answer.

public static int func1(int n) {
   int sum1 = 0, sum2 = 0;
   for (int m = 1; m <= n; m = m * 2) {
       for (int l = 1; l <= n; l = l + 5) {
           sum1++;

       }
   }

   for (int i = 1; i <= n; i++) {
       for (int j = 1; j < i; j++) {
           sum2++;

       }
   }
   return sum1 * sum2;
}
Solution:
Theta(n^2)
The m loop has (log n) iterations because m is multiplied by 2 every time, and the l loop has n/5 iterations; since the loops are nested,
the running time of m and l loops is Theta(n*log n).

j depends on i, so we need to do a summation to compute the running time of both loops:
 0 + 1 + ... + (n-1) = (n-1)*n / 2 = Theta(n^2)

Total running time of func1:
Theta(n*log n) + Theta(n^2) = Theta(n^2).
